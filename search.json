[{"path":"https://numbats.github.io/airpurifyr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 airpurifyr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://numbats.github.io/airpurifyr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jayani P.G. Lakshika. Author. David Wu. Author. Michael Lydeamore. Author, maintainer.","code":""},{"path":"https://numbats.github.io/airpurifyr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"P.G. Lakshika J, Wu D, Lydeamore M (2024). airpurifyr: clean interface OpenAQ Air Quality Data API. R package version 0.0.1, https://numbats.github.io/airpurifyr/.","code":"@Manual{,   title = {airpurifyr: A clean interface to the OpenAQ Air Quality Data API},   author = {Jayani {P.G. Lakshika} and David Wu and Michael Lydeamore},   year = {2024},   note = {R package version 0.0.1},   url = {https://numbats.github.io/airpurifyr/}, }"},{"path":"https://numbats.github.io/airpurifyr/index.html","id":"airpurifyr-","dir":"","previous_headings":"","what":"A clean interface to the OpenAQ Air Quality Data API","title":"A clean interface to the OpenAQ Air Quality Data API","text":"airpurifyr makes easy grab air quality data OpenAQ.","code":""},{"path":"https://numbats.github.io/airpurifyr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A clean interface to the OpenAQ Air Quality Data API","text":"can install development version airpurifyr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"numbats/airpurifyr\")"},{"path":[]},{"path":"https://numbats.github.io/airpurifyr/index.html","id":"setting-you-api-key","dir":"","previous_headings":"Usage","what":"Setting you API key","title":"A clean interface to the OpenAQ Air Quality Data API","text":"need register API key, can . Keep note API key, set using set_openaq_api_key(). using package regularly, can set API key using .Renviron inside .Rprofile, don’t share publicly!","code":""},{"path":"https://numbats.github.io/airpurifyr/index.html","id":"getting-data","dir":"","previous_headings":"Usage","what":"Getting data","title":"A clean interface to the OpenAQ Air Quality Data API","text":"get data, use function get_measurements_for_location(). ’ll probably want provide least country, maybe city. example, may also want filter locations, almost like suburbs dependent location sensors. info API fields can found OpenAQ Documentation.","code":"melbourne_data <- get_measurements_for_location(country = \"AU\", city = \"Melbourne\")"},{"path":"https://numbats.github.io/airpurifyr/reference/au_east_coast_2020.html","id":null,"dir":"Reference","previous_headings":"","what":"Air Quality Data for Australian East Coast, 2019-2020 — au_east_coast_2020","title":"Air Quality Data for Australian East Coast, 2019-2020 — au_east_coast_2020","text":"Air quality data OpenAQ API 1 December 2020 1 February 2021, period extreme bushfires Australia","code":""},{"path":"https://numbats.github.io/airpurifyr/reference/au_east_coast_2020.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Air Quality Data for Australian East Coast, 2019-2020 — au_east_coast_2020","text":"","code":"au_east_coast_2020"},{"path":[]},{"path":"https://numbats.github.io/airpurifyr/reference/au_east_coast_2020.html","id":"au-east-coast-","dir":"Reference","previous_headings":"","what":"au_east_coast_2020","title":"Air Quality Data for Australian East Coast, 2019-2020 — au_east_coast_2020","text":"data frame 43,031 rows 9 columns: location_id Numeric ID location location Character description location parameter Parameter measured (pm2.5 included) value Value parameter date_utc Datetime observation (UTC timezeon) unit Units measurement lat, long Latitude longitude station country Two-letter ISO country code station","code":""},{"path":"https://numbats.github.io/airpurifyr/reference/collate_paginated_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Collate paginated output for a given query — collate_paginated_output","title":"Collate paginated output for a given query — collate_paginated_output","text":"Collates output given query, query must called multiple times due pagination API. Assumes parser JSON response API.","code":""},{"path":"https://numbats.github.io/airpurifyr/reference/collate_paginated_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collate paginated output for a given query — collate_paginated_output","text":"","code":"collate_paginated_output(   endpoint,   query_params,   pagination_size,   response_parser )"},{"path":"https://numbats.github.io/airpurifyr/reference/collate_paginated_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collate paginated output for a given query — collate_paginated_output","text":"endpoint Endpoint API query_params List parameters pass API, values must strings pagination_size size response returned (page size). equal value query_params response_parser callable parses response something can concatenated","code":""},{"path":"https://numbats.github.io/airpurifyr/reference/collate_paginated_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collate paginated output for a given query — collate_paginated_output","text":"","code":"if (FALSE) { # \\dontrun{ # Construct a query endpoint <- \"measurements\" query_params <- list(   location = \"Melbourne\",   date_from = \"2024-05-24\",   date_to = \"2024-05-25\",   limit = \"100\" )  # Paginate over results collate_paginated_output(   endpoint = endpoint,   query_params = query_params,   pagination_size = 100,   response_parser = get_measures ) } # }"},{"path":"https://numbats.github.io/airpurifyr/reference/get_measurements_for_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Get air quality measurements for a location — get_measurements_for_location","title":"Get air quality measurements for a location — get_measurements_for_location","text":"Gets set air quality measurements OpenAQ API. can filter location, date, type station","code":""},{"path":"https://numbats.github.io/airpurifyr/reference/get_measurements_for_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get air quality measurements for a location — get_measurements_for_location","text":"","code":"get_measurements_for_location(   country = NULL,   city = NULL,   location = NULL,   date_from = Sys.Date() - 365,   date_to = Sys.Date(),   is_mobile = FALSE,   max_observations = 1000,   ... )"},{"path":"https://numbats.github.io/airpurifyr/reference/get_measurements_for_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get air quality measurements for a location — get_measurements_for_location","text":"country Two-character ISO country code city String city interest location smaller-geographical identifier (..e suburb) date_from Date observations start (converted UTC) date_to Date observations end (converted UTC) is_mobile Include mobile station types max_observations Number observations returned per page. Larger numbers mean less API calls single server load. ... Extra API parameters. Note must name-value pairs, values must type character.","code":""},{"path":"https://numbats.github.io/airpurifyr/reference/parse_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Air Quality Measures — parse_measures","title":"Get Air Quality Measures — parse_measures","text":"function extracts air quality measures parsed API response.","code":""},{"path":"https://numbats.github.io/airpurifyr/reference/parse_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Air Quality Measures — parse_measures","text":"","code":"parse_measures(req_cont)"},{"path":"https://numbats.github.io/airpurifyr/reference/parse_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Air Quality Measures — parse_measures","text":"req_cont list containing parsed API response. location data stored second element list.","code":""},{"path":"https://numbats.github.io/airpurifyr/reference/parse_measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Air Quality Measures — parse_measures","text":"tibble containing air quality measures columns location ID, location name, parameter name, measured value, date time measurement (UTC), unit measurement, latitude, longitude, country, city.","code":""},{"path":"https://numbats.github.io/airpurifyr/reference/parse_measures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Air Quality Measures — parse_measures","text":"","code":"if (FALSE) { # \\dontrun{ library(tibble) library(purrr) library(lubridate)  # Sample parsed API response req_cont <- content(response, \"parsed\")  # Get air quality measures measures <- get_measures(req_cont) } # }"},{"path":"https://numbats.github.io/airpurifyr/reference/set_openaq_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Set OpenAQ API Key — set_openaq_api_key","title":"Set OpenAQ API Key — set_openaq_api_key","text":"Sets OpenAQ API key use package airpurifyr Register API key https://explore.openaq.org/register, access account get API key dashboard https://explore.openaq.org/account","code":""},{"path":"https://numbats.github.io/airpurifyr/reference/set_openaq_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set OpenAQ API Key — set_openaq_api_key","text":"","code":"set_openaq_api_key(api_key)"},{"path":"https://numbats.github.io/airpurifyr/reference/set_openaq_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set OpenAQ API Key — set_openaq_api_key","text":"api_key API key set","code":""}]
